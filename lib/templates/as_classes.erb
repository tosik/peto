<%- name = @target[:name].camelize -%>
<%- args = @target[:args] -%>
package peto
{
	import peto.*;

	public class <%= name %>
	{
		public static function create(hash_args:Object):<%=name%>
		{
			var instance:<%= name %> = new <%= name %>;
			<%- args.each do |arg| -%>
				<%- if rb_primitive_types.include?(arg[:type].constantize) -%>
			instance.<%=arg[:name]%> = hash_args.<%= arg[:name]%>;
				<%- elsif arg[:array_type] -%>
			for each ( var arg:Object in hash_args.<%= arg[:name]%>)
				instance.<%=arg[:name]%>.push(<%=arg[:array_type]%>.create(arg));
				<%- else -%>
			instance.<%=arg[:name]%> = <%=arg[:type]%>.create(hash_args.<%= arg[:name]%>);
				<%- end -%>
			<%- end -%>
			return instance;
		}

		public function <%=name%>(<%= args.map{|arg| "#{arg[:name]}:#{arg[:type]}=null"}.join(",") %>)
		{
		<%- args.each do |arg| -%>
			this.<%= arg[:name] %> = <%= arg[:name] %>;
		<%- end -%>
		}

		<%- args.each do |arg| -%>
		private var m_<%= arg[:name] %>:<%= arg[:type] %>;
		public function get <%= arg[:name] %>():<%= arg[:type] %>
		{
			return m_<%= arg[:name] %>;
		}
		public function set <%= arg[:name] %>(value:<%= arg[:type] %>):void
		{
			m_<%= arg[:name] %> = value;
		}
		<%- end -%>

		public function toHash():Object
		{
			var hash:Object = new Object;
			<%- args.each do |arg| -%>
				<%- if rb_primitive_types.include?(arg[:type].constantize) -%>
			hash["<%= arg[:name]%>"] = <%=arg[:name]%>;
				<%- elsif arg[:array_type] -%>
			for each ( var arg:<%= arg[:array_type]%> in <%= arg[:name]%>)
				hash["<%= arg[:name]%>"] = <%=arg[:name]%>.toHash():
				<%- else -%>
			hash["<%= arg[:name]%>"] = <%=arg[:name]%>.toHash():
				<%- end -%>
			<%- end -%>
			return hash;
		}
	}
}
